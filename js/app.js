// Generated by CoffeeScript 1.6.3
(function() {
  var CSSWallDisplay, Color, ColorMatrix, ColorSource, DiffuseLightSource, LivingWallApp, LivingWallController, OpeningOverlayController, Util, WallDisplay, WaveLightSource, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var app, settings;
    settings = {
      displayClass: CSSWallDisplay,
      dotWidth: 40
    };
    app = new LivingWallApp(settings);
    return app.run();
  });

  LivingWallApp = (function() {
    function LivingWallApp(settings) {
      this.startingControllers = [OpeningOverlayController, LivingWallController];
      this.settings = settings;
    }

    LivingWallApp.prototype.run = function() {
      var c, controller, _i, _len, _ref, _results;
      _ref = this.startingControllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        c = new controller(this);
        _results.push(c.run());
      }
      return _results;
    };

    return LivingWallApp;

  })();

  OpeningOverlayController = (function() {
    function OpeningOverlayController(app) {
      this.overlay = $("#opening-overlay");
    }

    OpeningOverlayController.prototype.run = function() {
      var _this = this;
      this.overlay.blurjs({
        source: 'body',
        radius: 5
      });
      return setTimeout(function() {
        return _this.overlay.fadeOut(1000);
      }, 3000);
    };

    return OpeningOverlayController;

  })();

  LivingWallController = (function() {
    function LivingWallController(app) {
      this.settings = app.settings;
      this.dotsw = Math.floor($(window).width() / this.settings.dotWidth);
      this.dotsh = Math.floor($(window).height() / this.settings.dotWidth);
      this.display = new app.settings.displayClass(this.dotsw, this.dotsh);
      this.diffuseSources = [];
      this.lightness = 0;
    }

    LivingWallController.prototype.initialize = function() {
      return this.diffuseSources.push(new DiffuseLightSource(new Color(20, 0, 0)));
    };

    LivingWallController.prototype.run = function() {
      var _this = this;
      this.initialize();
      return this.display.initialize(function(time) {
        return _this.getColors(time);
      });
    };

    LivingWallController.prototype.getColors = function(time) {
      var baseColor, colors, source, start, _i, _len, _ref;
      start = this.lightness * 256;
      baseColor = new Color(start, start, start);
      colors = new ColorMatrix(this.dotsw, this.dotsh, baseColor);
      _ref = this.diffuseSources;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        source = _ref[_i];
        source.addColor(colors, time);
      }
      return colors;
    };

    return LivingWallController;

  })();

  WallDisplay = (function() {
    function WallDisplay(dotsw, dotsh) {
      this.dotsw = dotsw;
      this.dotsh = dotsh;
    }

    WallDisplay.prototype.initialize = function(screenCallback) {
      return this.callback = screenCallback;
    };

    return WallDisplay;

  })();

  CSSWallDisplay = (function(_super) {
    __extends(CSSWallDisplay, _super);

    function CSSWallDisplay() {
      _ref = CSSWallDisplay.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CSSWallDisplay.prototype.initialize = function(screenCallback) {
      var dot, i, left, _i, _ref1,
        _this = this;
      CSSWallDisplay.__super__.initialize.call(this, screenCallback);
      this.wallDiv = $("<div id='circle-container'>");
      this.dotDivs = [];
      for (i = _i = 0, _ref1 = this.dotsw * this.dotsh; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        left = dot = $("<div>").addClass('dot');
        this.dotDivs.push(dot);
        this.wallDiv.append(dot);
      }
      this.layoutDots();
      this.updateScreen();
      $("body").append(this.wallDiv);
      this.interval = setInterval(function() {
        return _this.updateScreen();
      }, 300);
      return $(window).resize(function() {
        return _this.layoutDots();
      });
    };

    CSSWallDisplay.prototype.layoutDots = function() {
      var col, contentHeight, contentWidth, dotWidth, i, left, leftOffset, row, screenHeight, screenWidth, top, topOffset, _i, _ref1;
      screenWidth = $(window).width();
      screenHeight = $(window).height();
      dotWidth = Math.floor(Math.min(screenWidth / this.dotsw, screenHeight / this.dotsh));
      contentWidth = dotWidth * this.dotsw;
      contentHeight = dotWidth * this.dotsh;
      leftOffset = Math.round((screenWidth - contentWidth) / 2.0);
      topOffset = Math.round((screenHeight - contentHeight) / 2.0);
      for (i = _i = 0, _ref1 = this.dotDivs.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        row = Math.floor(i / this.dotsw);
        col = i % this.dotsw;
        left = dotWidth * col + leftOffset;
        top = dotWidth * row + topOffset;
        this.dotDivs[i].css("left", left).css("top", top).css("width", dotWidth).css("height", dotWidth);
      }
      return null;
    };

    CSSWallDisplay.prototype.updateScreen = function() {
      var color, data, i, time, _i, _ref1, _results;
      time = new Date().getTime();
      data = this.callback(time);
      _results = [];
      for (i = _i = 0, _ref1 = this.dotDivs.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        color = data.get(i);
        _results.push(this.dotDivs[i].css("background-color", "rgb(" + color.toRGB() + ")"));
      }
      return _results;
    };

    return CSSWallDisplay;

  })(WallDisplay);

  Color = (function() {
    function Color(red, green, blue) {
      this.r = red;
      this.g = green;
      this.b = blue;
    }

    Color.prototype.copy = function() {
      return new Color(this.r, this.g, this.b);
    };

    Color.prototype.merge = function(color, alpha) {
      this.r = this.r * (1 - alpha) + color.r * alpha;
      this.g = this.g * (1 - alpha) + color.g * alpha;
      return this.b = this.b * (1 - alpha) + color.b * alpha;
    };

    Color.prototype.toRGB = function() {
      return [Math.round(this.r), Math.round(this.g), Math.round(this.b)].join();
    };

    return Color;

  })();

  ColorMatrix = (function() {
    function ColorMatrix(w, h, baseColor) {
      var i, _i, _ref1;
      this.colors = [];
      this.w = w;
      this.h = h;
      for (i = _i = 0, _ref1 = this.w * this.h; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        this.colors.push(baseColor.copy());
      }
    }

    ColorMatrix.prototype.set = function(x, y, color) {
      return this.colors[y * this.w + x] = color;
    };

    ColorMatrix.prototype.add = function(x, y, color, alpha) {
      return this.colors[y * this.w + x].merge(color, alpha);
    };

    ColorMatrix.prototype.get = function(i) {
      return this.colors[i];
    };

    return ColorMatrix;

  })();

  ColorSource = (function() {
    function ColorSource() {}

    ColorSource.prototype.addColor = function(matrix, time) {
      return false;
    };

    return ColorSource;

  })();

  WaveLightSource = (function(_super) {
    __extends(WaveLightSource, _super);

    function WaveLightSource(color) {
      this.center = {
        x: 0,
        y: 0
      };
      this.breadth = 100;
      this.displacement = 0;
      this.color = color;
      this.amplitude = 1;
    }

    WaveLightSource.prototype.updateWaveCharacteristics = function(time) {};

    WaveLightSource.prototype.addColor = function(colors, time) {
      var alpha, color, dist, factor, x, y, _i, _j, _ref1, _ref2;
      this.updateWaveCharacteristics(time);
      for (x = _i = 0, _ref1 = colors.w; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; x = 0 <= _ref1 ? ++_i : --_i) {
        for (y = _j = 0, _ref2 = colors.h; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; y = 0 <= _ref2 ? ++_j : --_j) {
          dist = Util.dist(this.center, {
            x: x,
            y: y
          }) - this.displacement;
          color = this.color;
          factor = Math.exp(-Math.pow(dist, 2) / 2 / this.breadth);
          alpha = this.amplitude * factor;
          colors.add(x, y, color, alpha);
        }
      }
      return true;
    };

    return WaveLightSource;

  })(ColorSource);

  DiffuseLightSource = (function(_super) {
    __extends(DiffuseLightSource, _super);

    function DiffuseLightSource() {
      _ref1 = DiffuseLightSource.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    DiffuseLightSource.prototype.updateWaveCharacteristics = function(time) {
      return this.center = {
        x: 10,
        y: 10
      };
    };

    return DiffuseLightSource;

  })(WaveLightSource);

  Util = (function() {
    function Util() {}

    Util.dist = function(pt1, pt2) {
      return Math.sqrt(Math.pow(pt1.x - pt2.x, 2) + Math.pow(pt1.y - pt2.y, 2));
    };

    return Util;

  })();

}).call(this);
