// Generated by CoffeeScript 1.6.3
(function() {
  var CSSWallDisplay, Color, LivingWallApp, LivingWallController, OpeningOverlayController, WallDisplay, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var app, settings;
    settings = {
      displayClass: CSSWallDisplay,
      dotWidth: 40
    };
    app = new LivingWallApp(settings);
    return app.run();
  });

  LivingWallApp = (function() {
    function LivingWallApp(settings) {
      this.startingControllers = [OpeningOverlayController, LivingWallController];
      this.settings = settings;
    }

    LivingWallApp.prototype.run = function() {
      var c, controller, _i, _len, _ref, _results;
      _ref = this.startingControllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        c = new controller(this);
        _results.push(c.run());
      }
      return _results;
    };

    return LivingWallApp;

  })();

  OpeningOverlayController = (function() {
    function OpeningOverlayController(app) {
      this.overlay = $("#opening-overlay");
    }

    OpeningOverlayController.prototype.run = function() {
      var _this = this;
      this.overlay.blurjs({
        source: 'body',
        radius: 5
      });
      return setTimeout(function() {
        return _this.overlay.fadeOut(1000);
      }, 3000);
    };

    return OpeningOverlayController;

  })();

  LivingWallController = (function() {
    function LivingWallController(app) {
      this.settings = app.settings;
      this.dotsw = Math.floor($(window).width() / this.settings.dotWidth);
      this.dotsh = Math.floor($(window).height() / this.settings.dotWidth);
      this.display = new app.settings.displayClass(this.dotsw, this.dotsh);
    }

    LivingWallController.prototype.run = function() {
      var _this = this;
      return this.display.initialize(function(time) {
        return _this.getColors(time);
      });
    };

    LivingWallController.prototype.getColors = function(time) {
      var colors, x, y, _i, _j, _ref, _ref1;
      colors = [];
      for (y = _i = 1, _ref = this.dotsh; 1 <= _ref ? _i <= _ref : _i >= _ref; y = 1 <= _ref ? ++_i : --_i) {
        for (x = _j = 1, _ref1 = this.dotsw; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 1 <= _ref1 ? ++_j : --_j) {
          colors.push(new Color(200, 100, 100));
        }
      }
      return colors;
    };

    return LivingWallController;

  })();

  WallDisplay = (function() {
    function WallDisplay(dotsw, dotsh) {
      this.dotsw = dotsw;
      this.dotsh = dotsh;
    }

    WallDisplay.prototype.initialize = function(screenCallback) {
      return this.callback = screenCallback;
    };

    return WallDisplay;

  })();

  CSSWallDisplay = (function(_super) {
    __extends(CSSWallDisplay, _super);

    function CSSWallDisplay() {
      _ref = CSSWallDisplay.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CSSWallDisplay.prototype.initialize = function(screenCallback) {
      var dot, i, left, _i, _ref1,
        _this = this;
      CSSWallDisplay.__super__.initialize.call(this, screenCallback);
      this.wallDiv = $("<div id='circle-container'>");
      this.dotDivs = [];
      for (i = _i = 0, _ref1 = this.dotsw * this.dotsh; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        left = dot = $("<div>").addClass('dot');
        this.dotDivs.push(dot);
        this.wallDiv.append(dot);
      }
      this.layoutDots();
      this.updateScreen();
      $("body").append(this.wallDiv);
      this.interval = setInterval(function() {
        return _this.updateScreen();
      }, 300);
      return $(window).resize(function() {
        return _this.layoutDots();
      });
    };

    CSSWallDisplay.prototype.layoutDots = function() {
      var col, contentHeight, contentWidth, dotWidth, i, left, leftOffset, row, screenHeight, screenWidth, top, topOffset, _i, _ref1;
      screenWidth = $(window).width();
      screenHeight = $(window).height();
      dotWidth = Math.floor(Math.min(screenWidth / this.dotsw, screenHeight / this.dotsh));
      contentWidth = dotWidth * this.dotsw;
      contentHeight = dotWidth * this.dotsh;
      leftOffset = Math.round((screenWidth - contentWidth) / 2.0);
      topOffset = Math.round((screenHeight - contentHeight) / 2.0);
      for (i = _i = 0, _ref1 = this.dotDivs.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        row = Math.floor(i / this.dotsw);
        col = i % this.dotsw;
        left = dotWidth * col + leftOffset;
        top = dotWidth * row + topOffset;
        this.dotDivs[i].css("left", left).css("top", top).css("width", dotWidth).css("height", dotWidth);
      }
      return null;
    };

    CSSWallDisplay.prototype.updateScreen = function() {
      var color, data, i, time, _i, _ref1, _results;
      time = new Date().getTime();
      data = this.callback(time);
      _results = [];
      for (i = _i = 0, _ref1 = this.dotDivs.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        color = data[i];
        _results.push(this.dotDivs[i].css("background-color", "rgb(" + color.r + ", " + color.g + ", " + color.b + ")"));
      }
      return _results;
    };

    return CSSWallDisplay;

  })(WallDisplay);

  Color = (function() {
    function Color(red, green, blue) {
      this.r = red;
      this.g = green;
      this.b = blue;
    }

    return Color;

  })();

}).call(this);
